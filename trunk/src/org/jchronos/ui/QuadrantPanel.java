/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuadrantPanel.java
 *
 * Created on Oct 14, 2008, 1:55:40 AM
 */
package org.jchronos.ui;

import java.awt.datatransfer.StringSelection;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import javax.swing.DefaultListModel;
import org.jdesktop.swingx.decorator.ColorHighlighter;
import org.jdesktop.swingx.decorator.HighlighterFactory;

/**
 *
 * @author XR1CTSO
 */
public class QuadrantPanel extends javax.swing.JPanel implements DragSourceListener, DragGestureListener {

    StringSelection transferable;
    DragSource ds = new DragSource();
    ArrayListTransferHandler arrayListTransferHandler;

    /** Creates new form QuadrantPanel */
    public QuadrantPanel() {
        arrayListTransferHandler = new ArrayListTransferHandler();
        initComponents();
        q1List.setHighlighters(
                HighlighterFactory.createSimpleStriping(HighlighterFactory.CLASSIC_LINE_PRINTER));

        q1List.addHighlighter(new ColorHighlighter(java.awt.Color.WHITE, java.awt.Color.RED));
        q1List.setRolloverEnabled(true);
        q1List.setTransferHandler(arrayListTransferHandler);
        DefaultListModel model = (DefaultListModel) q1List.getModel();
        model.addElement("Task 1 very important");
        model.addElement("Task 2 very important");
        model.addElement("Task 3 a testing task");
        model.addElement("Task 4 a testing task");
        q2List.setHighlighters(
                HighlighterFactory.createSimpleStriping(HighlighterFactory.CLASSIC_LINE_PRINTER));

        q2List.addHighlighter(new ColorHighlighter(java.awt.Color.WHITE, java.awt.Color.ORANGE));
        q2List.setRolloverEnabled(true);
        q2List.setTransferHandler(arrayListTransferHandler);

        q3List.setHighlighters(
                HighlighterFactory.createSimpleStriping(HighlighterFactory.CLASSIC_LINE_PRINTER));

        q3List.addHighlighter(new ColorHighlighter(java.awt.Color.WHITE, java.awt.Color.DARK_GRAY));
        q3List.setRolloverEnabled(true);
        q3List.setTransferHandler(arrayListTransferHandler);
        model = (DefaultListModel) q3List.getModel();
        model.addElement("Task A very important");
        model.addElement("Task B very important");
        q4List.setHighlighters(
                HighlighterFactory.createSimpleStriping(HighlighterFactory.CLASSIC_LINE_PRINTER));

        q4List.addHighlighter(new ColorHighlighter(java.awt.Color.WHITE, java.awt.Color.BLACK));
        q4List.setRolloverEnabled(true);
        q4List.setTransferHandler(arrayListTransferHandler);


    //DragGestureRecognizer dgr = ds.createDefaultDragGestureRecognizer(q1List,
    //        DnDConstants.ACTION_COPY, this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        q1List = new org.jdesktop.swingx.JXList();
        jScrollPane3 = new javax.swing.JScrollPane();
        q2List = new org.jdesktop.swingx.JXList();
        jScrollPane2 = new javax.swing.JScrollPane();
        q3List = new org.jdesktop.swingx.JXList();
        jScrollPane4 = new javax.swing.JScrollPane();
        q4List = new org.jdesktop.swingx.JXList();

        setLayout(new java.awt.GridLayout(2, 2));

        q1List.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());
        q1List.setModel(new TodoListModel());
        q1List.setDragEnabled(true);
        q1List.setVisibleRowCount(20);
        jScrollPane1.setViewportView(q1List);

        add(jScrollPane1);

        q2List.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());
        q2List.setModel(new TodoListModel());
        q2List.setDragEnabled(true);
        q2List.setVisibleRowCount(20);
        jScrollPane3.setViewportView(q2List);

        add(jScrollPane3);

        q3List.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());
        q3List.setModel(new TodoListModel());
        q3List.setDragEnabled(true);
        q3List.setVisibleRowCount(20);
        jScrollPane2.setViewportView(q3List);

        add(jScrollPane2);

        q4List.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());
        q4List.setModel(new TodoListModel());
        q4List.setDragEnabled(true);
        q4List.setVisibleRowCount(20);
        jScrollPane4.setViewportView(q4List);

        add(jScrollPane4);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private org.jdesktop.swingx.JXList q1List;
    private org.jdesktop.swingx.JXList q2List;
    private org.jdesktop.swingx.JXList q3List;
    private org.jdesktop.swingx.JXList q4List;
    // End of variables declaration//GEN-END:variables
    public void dragEnter(DragSourceDragEvent arg0) {
        System.out.println("Drag enter");
    }

    public void dragOver(DragSourceDragEvent arg0) {
        System.out.println("Drag OVer");
    }

    public void dropActionChanged(DragSourceDragEvent arg0) {
        System.out.println("Drop action changed");
    }

    public void dragExit(DragSourceEvent arg0) {
        System.out.println("Drag exit");
    }

    public void dragDropEnd(DragSourceDropEvent arg0) {
        System.out.println("DragDropEnd");
    }

    public void dragGestureRecognized(DragGestureEvent gestureEvent) {
        transferable = new StringSelection(q1List.getSelectedValue().toString());
        System.out.println("Source " + gestureEvent.getComponent());
    }
}
